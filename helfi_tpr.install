<?php

/**
 * @file
 * Contains helfi_tpr installation procedures.
 */

declare(strict_types = 1);

use Drupal\content_translation\ContentTranslationHandler;
use Drupal\Core\Config\FileStorage;
use Drupal\Core\Field\BaseFieldDefinition;
use Drupal\Core\Language\LanguageInterface;
use Drupal\Core\StringTranslation\TranslatableMarkup;
use Drupal\helfi_tpr\Entity\ChannelTypeCollection;
use Drupal\migrate\Plugin\MigrateIdMapInterface;

/**
 * Helper function to get the content translation field definitions.
 *
 * @return array
 *   The translation fields.
 */
function _helfi_tpr_get_content_translation_fields(): array {
  $definitions['content_translation_source'] = BaseFieldDefinition::create('language')
    ->setLabel(t('Translation source'))
    ->setDescription(t('The source language from which this translation was created.'))
    ->setDefaultValue(LanguageInterface::LANGCODE_NOT_SPECIFIED)
    ->setInitialValue(LanguageInterface::LANGCODE_NOT_SPECIFIED)
    ->setRevisionable(TRUE)
    ->setTranslatable(TRUE);

  $definitions['content_translation_outdated'] = BaseFieldDefinition::create('boolean')
    ->setLabel(t('Translation outdated'))
    ->setDescription(t('A boolean indicating whether this translation needs to be updated.'))
    ->setDefaultValue(FALSE)
    ->setInitialValue(FALSE)
    ->setRevisionable(TRUE)
    ->setTranslatable(TRUE);

  $definitions['content_translation_uid'] = BaseFieldDefinition::create('entity_reference')
    ->setLabel(t('Translation author'))
    ->setDescription(t('The author of this translation.'))
    ->setSetting('target_type', 'user')
    ->setSetting('handler', 'default')
    ->setRevisionable(TRUE)
    ->setDefaultValueCallback(ContentTranslationHandler::class . '::getDefaultOwnerId')
    ->setTranslatable(TRUE);

  $definitions['content_translation_status'] = BaseFieldDefinition::create('boolean')
    ->setLabel(t('Translation status'))
    ->setDescription(t('A boolean indicating whether the translation is visible to non-translators.'))
    ->setDefaultValue(TRUE)
    ->setInitialValue(TRUE)
    ->setRevisionable(TRUE)
    ->setTranslatable(TRUE);

  $definitions['content_translation_created'] = BaseFieldDefinition::create('created')
    ->setLabel(t('Translation created time'))
    ->setDescription(t('The Unix timestamp when the translation was created.'))
    ->setRevisionable(TRUE)
    ->setTranslatable(TRUE);

  $definitions['content_translation_changed'] = BaseFieldDefinition::create('changed')
    ->setLabel(t('Translation changed time'))
    ->setDescription(t('The Unix timestamp when the translation was most recently saved.'))
    ->setRevisionable(TRUE)
    ->setTranslatable(TRUE);

  return $definitions;
}

/**
 * Installs the service entity type.
 */
function helfi_tpr_update_8001() : void {
  $manager = \Drupal::entityDefinitionUpdateManager();
  $entity_type = \Drupal::entityTypeManager()->getDefinition('tpr_service');
  $manager->installEntityType($entity_type);
}

/**
 * Install TPR service description field.
 */
function helfi_tpr_update_8002() : void {
  $manager = \Drupal::entityDefinitionUpdateManager();
  $fields = [];
  $fields['description'] = BaseFieldDefinition::create('text_with_summary')
    ->setTranslatable(TRUE)
    ->setLabel(new TranslatableMarkup('Description'))
    ->setDisplayConfigurable('form', TRUE)
    ->setDisplayConfigurable('view', TRUE);

  foreach ($fields as $name => $field) {
    $manager->installFieldStorageDefinition($name, 'tpr_service', 'helfi_tpr', $field);
  }
}

/**
 * Install TPR unit service reference field.
 */
function helfi_tpr_update_8003() : void {
  $manager = \Drupal::entityDefinitionUpdateManager();
  $fields = [];
  $fields['services'] = BaseFieldDefinition::create('entity_reference')
    ->setLabel(new TranslatableMarkup('Services'))
    ->setSettings([
      'target_type' => 'tpr_service',
      'handler_settings' => [
        'target_bundles' => ['tpr_service'],
      ],
    ])
    ->setCardinality(BaseFieldDefinition::CARDINALITY_UNLIMITED)
    ->setDisplayConfigurable('view', TRUE)
    ->setDisplayConfigurable('form', TRUE);

  foreach ($fields as $name => $field) {
    $manager->installFieldStorageDefinition($name, 'tpr_unit', 'helfi_tpr', $field);
  }
}

/**
 * Install service 'data' field.
 */
function helfi_tpr_update_8004() : void {
  $manager = \Drupal::entityDefinitionUpdateManager();
  $fields = [];
  $fields['data'] = BaseFieldDefinition::create('map')
    ->setLabel(new TranslatableMarkup('Data'))
    ->setDescription(new TranslatableMarkup('A serialized array of additional data.'));

  foreach ($fields as $name => $field) {
    $manager->installFieldStorageDefinition($name, 'tpr_service', 'helfi_tpr', $field);
  }
}

/**
 * Install unit 'picture' field.
 */
function helfi_tpr_update_8005() : void {
  $manager = \Drupal::entityDefinitionUpdateManager();
  $fields = [];
  $fields['picture_url'] = BaseFieldDefinition::create('string')
    ->setLabel(new TranslatableMarkup('Picture'))
    ->setTranslatable(TRUE)
    ->setRevisionable(TRUE)
    ->setDefaultValue('')
    ->setDisplayConfigurable('view', TRUE)
    ->setDisplayConfigurable('form', TRUE)
    ->setSettings([
      'max_length' => 2048,
      'text_processing' => 0,
    ]);

  foreach ($fields as $name => $field) {
    $manager->installFieldStorageDefinition($name, 'tpr_unit', 'helfi_tpr', $field);
  }
}

/**
 * Installs the e-service and service channel entity types.
 */
function helfi_tpr_update_8006() : void {
  $manager = \Drupal::entityDefinitionUpdateManager();

  foreach (['tpr_errand_service', 'tpr_service_channel'] as $type) {
    $entity_type = \Drupal::entityTypeManager()->getDefinition($type);
    $manager->installEntityType($entity_type);
  }

  $fields['errand_services'] = BaseFieldDefinition::create('entity_reference')
    ->setLabel(new TranslatableMarkup('Errand Services'))
    ->setSettings([
      'target_type' => 'tpr_errand_service',
      'handler_settings' => [
        'target_bundles' => ['tpr_errand_service'],
      ],
    ])
    ->setCardinality(BaseFieldDefinition::CARDINALITY_UNLIMITED)
    ->setDisplayConfigurable('view', TRUE)
    ->setDisplayConfigurable('form', TRUE);

  foreach ($fields as $name => $field) {
    $manager->installFieldStorageDefinition($name, 'tpr_service', 'helfi_tpr', $field);
  }
}

/**
 * Enable translation for e-service, service and service channels.
 */
function helfi_tpr_update_8007() : void {
  $config_path = drupal_get_path('module', 'helfi_tpr') . '/config/install';
  $source = new FileStorage($config_path);
  $config_storage = \Drupal::service('config.storage');

  $types = ['tpr_errand_service', 'tpr_service', 'tpr_service_channel'];

  foreach ($types as $type) {
    $config_name = sprintf('language.content_settings.%s.%s', $type, $type);
    $config_storage->write($config_name, $source->read($config_name));
  }
}

/**
 * Installs TPR service links field.
 */
function helfi_tpr_update_8008() : void {
  $fields['links'] = BaseFieldDefinition::create('link')
    ->setLabel(new TranslatableMarkup('Links'))
    ->setTranslatable(TRUE)
    ->setRevisionable(TRUE)
    ->setDefaultValue('')
    ->setCardinality(BaseFieldDefinition::CARDINALITY_UNLIMITED)
    ->setDisplayConfigurable('view', TRUE)
    ->setDisplayConfigurable('form', TRUE);

  foreach ($fields as $name => $field) {
    \Drupal::entityDefinitionUpdateManager()
      ->installFieldStorageDefinition($name, 'tpr_service', 'helfi_tpr', $field);
  }
}

/**
 * Installs content translation fields for errand services and channels.
 */
function helfi_tpr_update_8010() : void {
  $definitions = _helfi_tpr_get_content_translation_fields();

  foreach (['tpr_errand_service', 'tpr_service_channel'] as $entity_type) {
    foreach ($definitions as $name => $field) {
      \Drupal::entityDefinitionUpdateManager()
        ->installFieldStorageDefinition($name, $entity_type, 'helfi_tpr', $field);
    }
  }
}

/**
 * Uninstall all entity types.
 */
function helfi_tpr_update_8011() : void {
  $manager = \Drupal::entityDefinitionUpdateManager();

  $entity_types = [
    'tpr_unit',
    'tpr_service',
    'tpr_errand_service',
    'tpr_service_channel',
  ];

  foreach ($entity_types as $type) {
    $manager->uninstallEntityType($manager->getEntityType($type));
  }
}

/**
 * Install all entity types.
 */
function helfi_tpr_update_8012() : void {
  $manager = \Drupal::entityDefinitionUpdateManager();

  $entity_types = [
    'tpr_unit',
    'tpr_service',
    'tpr_errand_service',
    'tpr_service_channel',
  ];
  foreach ($entity_types as $type) {
    $entity_type = \Drupal::entityTypeManager()->getDefinition($type);
    $manager->installEntityType($entity_type);
  }
}

/**
 * Update tpr_unit and tpr_service views.
 */
function helfi_tpr_update_8016() : void {
  $config_path = drupal_get_path('module', 'helfi_tpr') . '/config/install';
  $source = new FileStorage($config_path);
  $config_storage = \Drupal::service('config.storage');

  // Update TPR service "update action" to configuration.
  $tpr_service_action = 'system.action.tpr_service_update_action';
  $config_storage->write($tpr_service_action, $source->read($tpr_service_action));

  // Create file storages.
  $optional_config_path = drupal_get_path('module', 'helfi_tpr') . '/config/optional';
  $optional_config_source = new FileStorage($optional_config_path);
  $language_config_path = drupal_get_path('module', 'helfi_tpr') . '/config/language/fi';
  $language_config_source = new FileStorage($language_config_path);
  $views = ['views.view.tpr_service_list', 'views.view.tpr_unit_list'];

  // Update Unit and Service views to configuration.
  foreach ($views as $view) {
    $config_storage->write($view, $optional_config_source->read($view));
  }

  // Update Unit and Service views Finnish translations to configuration.
  foreach ($views as $view) {
    $config_storage
      ->createCollection('language.fi')
      ->write($view, $language_config_source->read($view));
  }
}

/**
 * Install 'accessibility_sentences' field.
 */
function helfi_tpr_update_8017() : void {
  $field = BaseFieldDefinition::create('tpr_accessibility_sentence')
    ->setLabel(new TranslatableMarkup('Accessibility sentence'))
    ->setTranslatable(TRUE)
    ->setCardinality(BaseFieldDefinition::CARDINALITY_UNLIMITED)
    ->setDisplayConfigurable('view', TRUE);
  \Drupal::entityDefinitionUpdateManager()
    ->installFieldStorageDefinition('accessibility_sentences', 'tpr_unit', 'helfi_tpr', $field);
}

/**
 * Install 'connections' field.
 */
function helfi_tpr_update_8018() : void {
  $field = BaseFieldDefinition::create('tpr_connection')
    ->setLabel(new TranslatableMarkup('Opening hours'))
    ->setTranslatable(TRUE)
    ->setCardinality(BaseFieldDefinition::CARDINALITY_UNLIMITED)
    ->setDisplayConfigurable('view', TRUE);
  \Drupal::entityDefinitionUpdateManager()
    ->installFieldStorageDefinition('opening_hours', 'tpr_unit', 'helfi_tpr', $field);
}

/**
 * Install publish and unpublish actions for TPR unit and service.
 */
function helfi_tpr_update_8019() : void {
  $config_path = drupal_get_path('module', 'helfi_tpr') . '/config/install';
  $source = new FileStorage($config_path);
  $config_storage = \Drupal::service('config.storage');

  // Update TPR unit and service publish and unpublish actions to configuration.
  $actions = [
    'system.action.tpr_service_publish_action',
    'system.action.tpr_service_unpublish_action',
    'system.action.tpr_unit_publish_action',
    'system.action.tpr_unit_unpublish_action',
  ];

  foreach ($actions as $action) {
    $config_storage->write($action, $source->read($action));
  }
}

/**
 * Uninstalls 'created' and 'changed' fields.
 */
function helfi_tpr_update_8020() : void {
  $manager = \Drupal::entityDefinitionUpdateManager();

  $entity_types = [
    'tpr_unit',
    'tpr_service',
    'tpr_errand_service',
    'tpr_service_channel',
  ];
  foreach ($entity_types as $type) {
    foreach (['created', 'changed'] as $field) {
      if (!$definition = $manager->getFieldStorageDefinition($field, $type)) {
        continue;
      }
      $manager->uninstallFieldStorageDefinition($definition);
    }
  }
}

/**
 * Add 'published' and 'owner' entity keys to all TPR entity types.
 */
function helfi_tpr_update_8021() : void {
  $definition_update_manager = \Drupal::entityDefinitionUpdateManager();

  $entity_types = [
    'tpr_unit',
    'tpr_service',
    'tpr_errand_service',
    'tpr_service_channel',
  ];
  foreach ($entity_types as $type) {
    $entity_type = $definition_update_manager->getEntityType($type);
    $keys = $entity_type->getKeys();
    $keys['published'] = 'content_translation_status';
    $keys['owner'] = 'content_translation_uid';
    $entity_type->set('entity_keys', $keys);
    $definition_update_manager->updateEntityType($entity_type);
  }
}

/**
 * Re-install content_translation_uid and status fields.
 */
function helfi_tpr_update_8022() : void {
  $manager = \Drupal::entityDefinitionUpdateManager();

  $entity_types = [
    'tpr_unit',
    'tpr_service',
    'tpr_errand_service',
    'tpr_service_channel',
  ];
  field_purge_batch(1000);

  foreach ($entity_types as $type) {
    foreach (['uid', 'status'] as $field) {
      $field_name = 'content_translation_' . $field;

      if ($definition = $manager->getFieldStorageDefinition($field_name, $type)) {
        $manager->uninstallFieldStorageDefinition($definition);
        field_purge_batch(1000);
        $manager->installFieldStorageDefinition($field_name, $type, 'content_translation', $definition);
      }
    }
  }
}

/**
 * Update tpr views again.
 */
function helfi_tpr_update_8023() : void {
  helfi_tpr_update_8016();
}

/**
 * Adds 'menu_link' field to tpr service.
 */
function helfi_tpr_update_8024() : void {
  $field = BaseFieldDefinition::create('entity_reference')
    ->setLabel(new TranslatableMarkup('Menu link'))
    ->setSettings([
      'target_type' => 'menu_link_content',
    ])
    ->setRevisionable(FALSE)
    ->setTranslatable(TRUE);
  \Drupal::entityDefinitionUpdateManager()
    ->installFieldStorageDefinition('menu_link_content', 'tpr_service', 'helfi_tpr', $field);
}

/**
 * Install tpr_errand_service and tpr_service_channel views.
 */
function helfi_tpr_update_8025() : void {
  $config_storage = \Drupal::service('config.storage');
  $config_factory = \Drupal::configFactory();
  $uuid_service = \Drupal::service('uuid');

  // Create file storages.
  $config_path = drupal_get_path('module', 'helfi_tpr') . '/config/install';
  $config_source = new FileStorage($config_path);
  $optional_config_path = drupal_get_path('module', 'helfi_tpr') . '/config/optional';
  $optional_config_source = new FileStorage($optional_config_path);
  $language_config_path = drupal_get_path('module', 'helfi_tpr') . '/config/language/fi';
  $language_config_source = new FileStorage($language_config_path);

  // Add new configs for entity publish and unpublish actions.
  $actions = [
    'system.action.tpr_errand_service_publish_action',
    'system.action.tpr_errand_service_unpublish_action',
    'system.action.tpr_service_channel_publish_action',
    'system.action.tpr_service_channel_unpublish_action',
  ];
  foreach ($actions as $action) {
    if (empty($config_factory->loadMultiple([$action]))) {
      $config_storage->write($action, $config_source->read($action));
      $config_factory->getEditable($action)->set('uuid', $uuid_service->generate())->save();
    }
  }

  // Install new configs for 'Errand service' and 'Service channel' views.
  \Drupal::service('config.installer')->installOptionalConfig($optional_config_source);
  // Add Finnish translation for 'Errand service' and 'Service channel' views.
  $views = [
    'views.view.tpr_errand_service_list',
    'views.view.tpr_service_channel_list',
  ];
  foreach ($views as $view) {
    $config_storage->createCollection('language.fi')->write($view, $language_config_source->read($view));
  }
}

/**
 * Adds 'provided_languages' field to 'tpr_unit' entity.
 */
function helfi_tpr_update_8026() : void {
  $fields['provided_languages'] = BaseFieldDefinition::create('string')
    ->setLabel(new TranslatableMarkup('Provided languages'))
    ->setCardinality(BaseFieldDefinition::CARDINALITY_UNLIMITED)
    ->setTranslatable(FALSE)
    ->setDisplayOptions('form', [
      'type' => 'readonly_field_widget',
    ])
    ->setDisplayConfigurable('view', TRUE)
    ->setDisplayConfigurable('form', TRUE);

  foreach ($fields as $name => $field) {
    \Drupal::entityDefinitionUpdateManager()
      ->installFieldStorageDefinition($name, 'tpr_unit', 'helfi_tpr', $field);
  }
}

/**
 * Drop migrate map tables to add second id map field.
 */
function helfi_tpr_update_8027() : void {
  foreach (['unit', 'service', 'errand_service', 'service_channel'] as $type) {
    $query = \Drupal::database()->schema();
    $table = "migrate_map_tpr_$type";

    if (!$query->fieldExists($table, 'sourceid2')) {
      $query->dropTable($table);
    }
  }
}

/**
 * Make service channels translatable.
 */
function helfi_tpr_update_8028() : void {
  drupal_flush_all_caches();
  $entityManager = \Drupal::entityTypeManager();

  $published = [];
  /** @var \Drupal\helfi_tpr\Entity\Channel $entity */
  // Delete service channels and store published status to state.
  foreach ($entityManager->getStorage('tpr_service_channel')->loadMultiple() as $entity) {
    if ($entity->isPublished()) {
      $published[] = $entity->id();
    }
    $entity->delete(TRUE);
  }
  \Drupal::state()->set('published_service_channels', $published);

  // Reset errand service channels.
  foreach ($entityManager->getStorage('tpr_errand_service')->loadMultiple() as $entity) {
    $entity->setData('channels', [])
      ->save();
  }
}

/**
 * Add 'hide_description' field to the TPR Unit entity.
 */
function helfi_tpr_update_8029() : void {
  $fields['hide_description'] = BaseFieldDefinition::create('boolean')
    ->setLabel(new TranslatableMarkup('Hide description'))
    ->setDisplayConfigurable('view', TRUE)
    ->setDisplayConfigurable('form', TRUE);

  foreach ($fields as $name => $field) {
    \Drupal::entityDefinitionUpdateManager()
      ->installFieldStorageDefinition($name, 'tpr_unit', 'helfi_tpr', $field);
  }
}

/**
 * Install tpr_ontology_word_details entity type.
 */
function helfi_tpr_update_8030() : void {
  // Install entity type.
  $manager = \Drupal::entityDefinitionUpdateManager();
  $entity_type = \Drupal::entityTypeManager()->getDefinition('tpr_ontology_word_details');
  $manager->installEntityType($entity_type);

  // Install content translation fields.
  $type = 'tpr_ontology_word_details';
  $definitions = _helfi_tpr_get_content_translation_fields();
  foreach ($definitions as $name => $field) {
    \Drupal::entityDefinitionUpdateManager()
      ->installFieldStorageDefinition($name, $type, 'helfi_tpr', $field);
  }
}

/**
 * Re-install school_details field.
 */
function helfi_tpr_update_8031() : void {
  drupal_flush_all_caches();
  $manager = \Drupal::entityDefinitionUpdateManager();

  if ($definition = $manager->getFieldStorageDefinition('school_details', 'tpr_ontology_word_details')) {
    // Removes all field data. However, the data is fetched using
    // tpr_ontology_word_details migration so importing it again should be easy.
    $manager->uninstallFieldStorageDefinition($definition);
    $manager->installFieldStorageDefinition('school_details', 'tpr_ontology_word_details', 'helfi_tpr', $definition);
  }
}

/**
 * Add 'show_www' field to the TPR Unit entity.
 */
function helfi_tpr_update_8032() : void {
  $fields['show_www'] = BaseFieldDefinition::create('boolean')
    ->setLabel(new TranslatableMarkup('Show website link'))
    ->setDisplayConfigurable('view', TRUE)
    ->setDisplayConfigurable('form', TRUE);

  foreach ($fields as $name => $field) {
    \Drupal::entityDefinitionUpdateManager()
      ->installFieldStorageDefinition($name, 'tpr_unit', 'helfi_tpr', $field);
  }
}

/**
 * Adds update action for errand services.
 */
function helfi_tpr_update_8035() : void {
  $config_path = \Drupal::service('extension.list.module')
    ->getPath('helfi_tpr') . '/config/install';
  $source = new FileStorage($config_path);
  $config_storage = \Drupal::service('config.storage');

  $actions = [
    'system.action.tpr_errand_service_update_action',
  ];

  foreach ($actions as $action) {
    $config_storage->write($action, $source->read($action));
  }
}

/**
 * Changes the default service channel display formatter for Errand service.
 */
function helfi_tpr_update_8036() : void {
  $expectedOrder = [];
  foreach (ChannelTypeCollection::all() as $item) {
    $expectedOrder[$item->id] = ['weight' => $item->weight];
  }
  /** @var \Drupal\Core\Entity\EntityDisplayRepositoryInterface $display_repository */
  $display_repository = \Drupal::service('entity_display.repository');
  $display_repository->getViewDisplay('tpr_errand_service', 'tpr_errand_service')
    ->setComponent('channels', [
      'type' => 'tpr_service_channel_formatter',
      'settings' => [
        'sort_order' => $expectedOrder,
      ],
      'label' => 'hidden',
    ])
    ->save();
}

/**
 * Hide service channel label.
 */
function helfi_tpr_update_8037() : void {
  // Re-run previous update with label = 'hidden' added.
  helfi_tpr_update_8036();
}

/**
 * Rename the school_details field to detail_items.
 */
function helfi_tpr_update_8038() : void {
  $manager = \Drupal::entityDefinitionUpdateManager();

  if ($oldDefinition = $manager->getFieldStorageDefinition('school_details', 'tpr_ontology_word_details')) {
    drupal_flush_all_caches();

    // Remove the current field with all field data. However, the data is
    // fetched using the tpr_ontology_word_details migration, so it's easy to
    // re-import.
    $manager->uninstallFieldStorageDefinition($oldDefinition);

    // Install the renamed field.
    $fields['detail_items'] = BaseFieldDefinition::create('tpr_ontology_word_detail_item')
      ->setLabel(new TranslatableMarkup('Details'))
      ->setRevisionable(FALSE)
      ->setTranslatable(TRUE)
      ->setCardinality(BaseFieldDefinition::CARDINALITY_UNLIMITED)
      ->setDisplayConfigurable('view', TRUE)
      ->setDisplayOptions('form', [
        'type' => 'readonly_field_widget',
      ]);

    foreach ($fields as $name => $field) {
      \Drupal::entityDefinitionUpdateManager()
        ->installFieldStorageDefinition($name, 'tpr_ontology_word_details', 'helfi_tpr', $field);
    }
  }
}

/**
 * Add 'highlights' field to the TPR Unit entity.
 */
function helfi_tpr_update_8039() : void {
  $fields['highlights'] = BaseFieldDefinition::create('tpr_connection')
    ->setLabel(new TranslatableMarkup('Highlights'))
    ->setTranslatable(TRUE)
    ->setCardinality(BaseFieldDefinition::CARDINALITY_UNLIMITED)
    ->setDisplayConfigurable('view', TRUE);

  foreach ($fields as $name => $field) {
    \Drupal::entityDefinitionUpdateManager()
      ->installFieldStorageDefinition($name, 'tpr_unit', 'helfi_tpr', $field);
  }
}

/**
 * Add name_synonyms field and service_id field to Service entity.
 */
function helfi_tpr_update_8040() : void {

  $fields['service_id'] = BaseFieldDefinition::create('integer')
    ->setLabel(new TranslatableMarkup('Service grouping ID'))
    ->setDescription(new TranslatableMarkup('Value from service_id property'))
    ->setDisplayOptions('form', [
      'type' => 'readonly_field_widget',
    ])
    ->setDisplayConfigurable('form', TRUE)
    ->setDisplayConfigurable('view', TRUE)
    ->setSetting('unsigned', TRUE);

  $fields['name_synonyms'] = BaseFieldDefinition::create('string_long')
    ->setTranslatable(TRUE)
    ->setRevisionable(FALSE)
    ->setLabel(new TranslatableMarkup('Name synonyms'))
    ->setDescription(new TranslatableMarkup('Name synonyms for the service title.'))
    ->setDisplayOptions('form', [
      'type' => 'readonly_field_widget',
    ])
    ->setDisplayConfigurable('form', TRUE)
    ->setDisplayConfigurable('view', TRUE);

  foreach ($fields as $name => $field) {
    \Drupal::entityDefinitionUpdateManager()
      ->installFieldStorageDefinition($name, 'tpr_service', 'helfi_tpr', $field);
  }
}

/**
 * Map all services that needs update to import name_synonyms on next migration.
 */
function helfi_tpr_update_8041() : void {
  \Drupal::database()->update('migrate_map_tpr_service')->fields([
    'source_row_status' => MigrateIdMapInterface::STATUS_NEEDS_UPDATE
  ])->execute();
}
