<?php

/**
 * @file
 * Contains helfi_tpr installation procedures.
 */

use Drupal\content_translation\ContentTranslationHandler;
use Drupal\Core\Config\FileStorage;
use Drupal\Core\Field\BaseFieldDefinition;
use Drupal\Core\Language\LanguageInterface;
use Drupal\Core\StringTranslation\TranslatableMarkup;
use Drupal\helfi_tpr\Entity\TprEntityBase;

/**
 * Installs the service entity type.
 */
function helfi_tpr_update_8001() : void {
  $manager = \Drupal::entityDefinitionUpdateManager();
  $entity_type = \Drupal::entityTypeManager()->getDefinition('tpr_service');
  $manager->installEntityType($entity_type);
}

/**
 * Install TPR service description field.
 */
function helfi_tpr_update_8002() : void {
  $manager = \Drupal::entityDefinitionUpdateManager();
  $fields = [];
  $fields['description'] = BaseFieldDefinition::create('text_with_summary')
    ->setTranslatable(TRUE)
    ->setLabel(new TranslatableMarkup('Description'))
    ->setDisplayConfigurable('form', TRUE)
    ->setDisplayConfigurable('view', TRUE);

  foreach ($fields as $name => $field) {
    $manager->installFieldStorageDefinition($name, 'tpr_service', 'helfi_tpr', $field);
  }
}

/**
 * Install TPR unit service reference field.
 */
function helfi_tpr_update_8003() : void {
  $manager = \Drupal::entityDefinitionUpdateManager();
  $fields = [];
  $fields['services'] = BaseFieldDefinition::create('entity_reference')
    ->setLabel(new TranslatableMarkup('Services'))
    ->setSettings([
      'target_type' => 'tpr_service',
      'handler_settings' => [
        'target_bundles' => ['tpr_service'],
      ],
    ])
    ->setCardinality(BaseFieldDefinition::CARDINALITY_UNLIMITED)
    ->setDisplayConfigurable('view', TRUE)
    ->setDisplayConfigurable('form', TRUE);

  foreach ($fields as $name => $field) {
    $manager->installFieldStorageDefinition($name, 'tpr_unit', 'helfi_tpr', $field);
  }
}

/**
 * Install service 'data' field.
 */
function helfi_tpr_update_8004() : void {
  $manager = \Drupal::entityDefinitionUpdateManager();
  $fields = [];
  $fields['data'] = BaseFieldDefinition::create('map')
    ->setLabel(new TranslatableMarkup('Data'))
    ->setDescription(new TranslatableMarkup('A serialized array of additional data.'));

  foreach ($fields as $name => $field) {
    $manager->installFieldStorageDefinition($name, 'tpr_service', 'helfi_tpr', $field);
  }
}

/**
 * Install unit 'picture' field.
 */
function helfi_tpr_update_8005() : void {
  $manager = \Drupal::entityDefinitionUpdateManager();
  $fields = [];
  $fields['picture_url'] = BaseFieldDefinition::create('string')
    ->setLabel(new TranslatableMarkup('Picture'))
    ->setTranslatable(TRUE)
    ->setRevisionable(TRUE)
    ->setDefaultValue('')
    ->setDisplayConfigurable('view', TRUE)
    ->setDisplayConfigurable('form', TRUE)
    ->setSettings([
      'max_length' => 2048,
      'text_processing' => 0,
    ]);

  foreach ($fields as $name => $field) {
    $manager->installFieldStorageDefinition($name, 'tpr_unit', 'helfi_tpr', $field);
  }
}

/**
 * Installs the e-service and service channel entity types.
 */
function helfi_tpr_update_8006() : void {
  $manager = \Drupal::entityDefinitionUpdateManager();

  foreach (['tpr_errand_service', 'tpr_service_channel'] as $type) {
    $entity_type = \Drupal::entityTypeManager()->getDefinition($type);
    $manager->installEntityType($entity_type);
  }

  $fields['errand_services'] = BaseFieldDefinition::create('entity_reference')
    ->setLabel(new TranslatableMarkup('Errand Services'))
    ->setSettings([
      'target_type' => 'tpr_errand_service',
      'handler_settings' => [
        'target_bundles' => ['tpr_errand_service'],
      ],
    ])
    ->setCardinality(BaseFieldDefinition::CARDINALITY_UNLIMITED)
    ->setDisplayConfigurable('view', TRUE)
    ->setDisplayConfigurable('form', TRUE);

  foreach ($fields as $name => $field) {
    $manager->installFieldStorageDefinition($name, 'tpr_service', 'helfi_tpr', $field);
  }
}

/**
 * Enable translation for e-service, service and service channels.
 */
function helfi_tpr_update_8007() : void {
  $config_path = drupal_get_path('module', 'helfi_tpr') . '/config/install';
  $source = new FileStorage($config_path);
  $config_storage = \Drupal::service('config.storage');

  $types = ['tpr_errand_service', 'tpr_service', 'tpr_service_channel'];

  foreach ($types as $type) {
    $config_name = sprintf('language.content_settings.%s.%s', $type, $type);
    $config_storage->write($config_name, $source->read($config_name));
  }
}

/**
 * Installs TPR service links field.
 */
function helfi_tpr_update_8008() : void {
  $fields['links'] = BaseFieldDefinition::create('link')
    ->setLabel(new TranslatableMarkup('Links'))
    ->setTranslatable(TRUE)
    ->setRevisionable(TRUE)
    ->setDefaultValue('')
    ->setCardinality(BaseFieldDefinition::CARDINALITY_UNLIMITED)
    ->setDisplayConfigurable('view', TRUE)
    ->setDisplayConfigurable('form', TRUE);

  foreach ($fields as $name => $field) {
    \Drupal::entityDefinitionUpdateManager()
      ->installFieldStorageDefinition($name, 'tpr_service', 'helfi_tpr', $field);
  }
}

/**
 * Installs name override fields.
 */
function helfi_tpr_update_8009() : void {
  $field = BaseFieldDefinition::create('string')
    ->setLabel(new TranslatableMarkup('Override: Name'))
    ->setTranslatable(TRUE)
    ->setRevisionable(TRUE)
    ->setDefaultValue('')
    ->setDisplayConfigurable('view', TRUE)
    ->setDisplayConfigurable('form', TRUE)
    ->setSettings([
      'max_length' => 255,
      'text_processing' => 0,
    ]);

  $entity_types = [
    'tpr_unit',
    'tpr_service',
    'tpr_errand_service',
    'tpr_service_channel'
  ];

  foreach ($entity_types as $type) {
    \Drupal::entityDefinitionUpdateManager()
      ->installFieldStorageDefinition('name_override', $type, 'helfi_tpr', $field);
  }
}

/**
 * Installs content translation fields for errand services and channels.
 */
function helfi_tpr_update_8010() : void {
  $definitions['content_translation_source'] = BaseFieldDefinition::create('language')
    ->setLabel(t('Translation source'))
    ->setDescription(t('The source language from which this translation was created.'))
    ->setDefaultValue(LanguageInterface::LANGCODE_NOT_SPECIFIED)
    ->setInitialValue(LanguageInterface::LANGCODE_NOT_SPECIFIED)
    ->setRevisionable(TRUE)
    ->setTranslatable(TRUE);

  $definitions['content_translation_outdated'] = BaseFieldDefinition::create('boolean')
    ->setLabel(t('Translation outdated'))
    ->setDescription(t('A boolean indicating whether this translation needs to be updated.'))
    ->setDefaultValue(FALSE)
    ->setInitialValue(FALSE)
    ->setRevisionable(TRUE)
    ->setTranslatable(TRUE);

  $definitions['content_translation_uid'] = BaseFieldDefinition::create('entity_reference')
    ->setLabel(t('Translation author'))
    ->setDescription(t('The author of this translation.'))
    ->setSetting('target_type', 'user')
    ->setSetting('handler', 'default')
    ->setRevisionable(TRUE)
    ->setDefaultValueCallback(ContentTranslationHandler::class . '::getDefaultOwnerId')
    ->setTranslatable(TRUE);

  $definitions['content_translation_status'] = BaseFieldDefinition::create('boolean')
    ->setLabel(t('Translation status'))
    ->setDescription(t('A boolean indicating whether the translation is visible to non-translators.'))
    ->setDefaultValue(TRUE)
    ->setInitialValue(TRUE)
    ->setRevisionable(TRUE)
    ->setTranslatable(TRUE);

  $definitions['content_translation_created'] = BaseFieldDefinition::create('created')
    ->setLabel(t('Translation created time'))
    ->setDescription(t('The Unix timestamp when the translation was created.'))
    ->setRevisionable(TRUE)
    ->setTranslatable(TRUE);

  $definitions['content_translation_changed'] = BaseFieldDefinition::create('changed')
    ->setLabel(t('Translation changed time'))
    ->setDescription(t('The Unix timestamp when the translation was most recently saved.'))
    ->setRevisionable(TRUE)
    ->setTranslatable(TRUE);

  foreach (['tpr_errand_service', 'tpr_service_channel'] as $entity_type) {
    foreach ($definitions as $name => $field) {
      \Drupal::entityDefinitionUpdateManager()
        ->installFieldStorageDefinition($name, $entity_type, 'helfi_tpr', $field);
    }
  }
}

/**
 * Make migrated unit fields not revisionable.
 */
function helfi_tpr_update_8011() : void {
  $manager = \Drupal::entityDefinitionUpdateManager();

  $fields = [
    'name',
    'picture_url',
    'email',
    'accessibility_phone',
    'accessibility_email',
    'www',
    'accessibility_www',
    'description',
    'address',
    'address_postal',
    'latitude',
    'longitude',
    'streetview_entrance_url',
    'service_map_embed',
  ];

  foreach ($fields as $field) {
    $definition = $manager->getFieldStorageDefinition($field, 'tpr_unit');
    $definition->setRevisionable(FALSE);

    $manager->updateFieldStorageDefinition($definition);
  }

  if ($definition = $manager->getFieldStorageDefinition('call_charge_info', 'tpr_unit')) {
    \Drupal::database()->update('tpr_unit_field_data')
      ->isNotNull('call_charge_info')
      ->fields(['call_charge_info' => NULL])
      ->execute();

    $manager->uninstallFieldStorageDefinition($definition);

    $field = BaseFieldDefinition::create('text_long')
      ->setTranslatable(TRUE)
      ->setRevisionable(FALSE)
      ->setLabel(new TranslatableMarkup('Call charge info'))
      ->setDisplayOptions('form', [
        'type' => 'readonly_field_widget',
      ])
      ->setDisplayConfigurable('form', TRUE)
      ->setDisplayConfigurable('view', TRUE);

    $manager->installFieldStorageDefinition('call_charge_info', 'tpr_unit', 'helfi_tpr', $field);
  }
}

/**
 * Make migrated service channel fields not revisionable.
 */
function helfi_tpr_update_8012() : void {
  $manager = \Drupal::entityDefinitionUpdateManager();

  $fields = [
    'name',
    'email',
    'type',
    'type_string',
    'phone',
    'address',
  ];

  foreach ($fields as $field) {
    $definition = $manager->getFieldStorageDefinition($field, 'tpr_service_channel');
    $definition->setRevisionable(FALSE);

    $manager->updateFieldStorageDefinition($definition);
  }
}

/**
 * Make migrated service fields not revisionable.
 */
function helfi_tpr_update_8013() : void {
  $manager = \Drupal::entityDefinitionUpdateManager();
  $definition = $manager->getFieldStorageDefinition('name', 'tpr_service');
  $definition->setRevisionable(FALSE);

  $manager->updateFieldStorageDefinition($definition);
}

/**
 * Make migrated errand service fields not revisionable.
 */
function helfi_tpr_update_8014() : void {
  $manager = \Drupal::entityDefinitionUpdateManager();
  foreach (['name', 'type'] as $field) {
    $definition = $manager->getFieldStorageDefinition($field, 'tpr_errand_service');
    $definition->setRevisionable(FALSE);

    $manager->updateFieldStorageDefinition($definition);
  }
}

/**
 * Installs Unit 'picture_url_override' field.
 */
function helfi_tpr_update_8015() : void {
  $picture_url_override = BaseFieldDefinition::create('entity_reference')
    ->setLabel(new TranslatableMarkup('Override: Picture'))
    ->setSettings([
      'target_type' => 'media',
      'handler_settings' => [
        'target_bundles' => ['image'],
      ],
    ])
    ->setDisplayConfigurable('view', TRUE)
    ->setDisplayConfigurable('form', TRUE);

  \Drupal::entityDefinitionUpdateManager()
    ->installFieldStorageDefinition('picture_url_override', 'tpr_unit', 'helfi_tpr', $picture_url_override);
}
