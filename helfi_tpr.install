<?php

/**
 * @file
 * Contains helfi_tpr installation procedures.
 */

use Drupal\Core\Config\FileStorage;
use Drupal\Core\Field\BaseFieldDefinition;
use Drupal\Core\StringTranslation\TranslatableMarkup;

/**
 * Installs the service entity type.
 */
function helfi_tpr_update_8001() : void {
  $manager = \Drupal::entityDefinitionUpdateManager();
  $entity_type = \Drupal::entityTypeManager()->getDefinition('tpr_service');
  $manager->installEntityType($entity_type);
}

/**
 * Install TPR service description field.
 */
function helfi_tpr_update_8002() : void {
  $manager = \Drupal::entityDefinitionUpdateManager();
  $fields = [];
  $fields['description'] = BaseFieldDefinition::create('text_with_summary')
    ->setTranslatable(TRUE)
    ->setLabel(new TranslatableMarkup('Description'))
    ->setDisplayConfigurable('form', TRUE)
    ->setDisplayConfigurable('view', TRUE);

  foreach ($fields as $name => $field) {
    $manager->installFieldStorageDefinition($name, 'tpr_service', 'helfi_tpr', $field);
  }
}

/**
 * Install TPR unit service reference field.
 */
function helfi_tpr_update_8003() : void {
  $manager = \Drupal::entityDefinitionUpdateManager();
  $fields = [];
  $fields['services'] = BaseFieldDefinition::create('entity_reference')
    ->setLabel(new TranslatableMarkup('Services'))
    ->setSettings([
      'target_type' => 'tpr_service',
      'handler_settings' => [
        'target_bundles' => ['tpr_service'],
      ],
    ])
    ->setCardinality(BaseFieldDefinition::CARDINALITY_UNLIMITED)
    ->setDisplayConfigurable('view', TRUE)
    ->setDisplayConfigurable('form', TRUE);

  foreach ($fields as $name => $field) {
    $manager->installFieldStorageDefinition($name, 'tpr_unit', 'helfi_tpr', $field);
  }
}

/**
 * Install service 'data' field.
 */
function helfi_tpr_update_8004() : void {
  $manager = \Drupal::entityDefinitionUpdateManager();
  $fields = [];
  $fields['data'] = BaseFieldDefinition::create('map')
    ->setLabel(new TranslatableMarkup('Data'))
    ->setDescription(new TranslatableMarkup('A serialized array of additional data.'));

  foreach ($fields as $name => $field) {
    $manager->installFieldStorageDefinition($name, 'tpr_service', 'helfi_tpr', $field);
  }
}

/**
 * Install unit 'picture' field.
 */
function helfi_tpr_update_8005() : void {
  $manager = \Drupal::entityDefinitionUpdateManager();
  $fields = [];
  $fields['picture_url'] = BaseFieldDefinition::create('string')
    ->setLabel(new TranslatableMarkup('Picture'))
    ->setTranslatable(TRUE)
    ->setRevisionable(TRUE)
    ->setDefaultValue('')
    ->setDisplayConfigurable('view', TRUE)
    ->setDisplayConfigurable('form', TRUE)
    ->setSettings([
      'max_length' => 2048,
      'text_processing' => 0,
    ]);

  foreach ($fields as $name => $field) {
    $manager->installFieldStorageDefinition($name, 'tpr_unit', 'helfi_tpr', $field);
  }
}

/**
 * Installs the e-service and service channel entity types.
 */
function helfi_tpr_update_8006() : void {
  $manager = \Drupal::entityDefinitionUpdateManager();

  foreach (['tpr_errand_service', 'tpr_service_channel'] as $type) {
    $entity_type = \Drupal::entityTypeManager()->getDefinition($type);
    $manager->installEntityType($entity_type);
  }

  $fields['errand_services'] = BaseFieldDefinition::create('entity_reference')
    ->setLabel(new TranslatableMarkup('Errand Services'))
    ->setSettings([
      'target_type' => 'tpr_errand_service',
      'handler_settings' => [
        'target_bundles' => ['tpr_errand_service'],
      ],
    ])
    ->setCardinality(BaseFieldDefinition::CARDINALITY_UNLIMITED)
    ->setDisplayConfigurable('view', TRUE)
    ->setDisplayConfigurable('form', TRUE);

  foreach ($fields as $name => $field) {
    $manager->installFieldStorageDefinition($name, 'tpr_service', 'helfi_tpr', $field);
  }
}

/**
 * Enable translation for e-service, service and service channels.
 */
function helfi_tpr_update_8007() : void {
  $config_path = drupal_get_path('module', 'helfi_tpr') . '/config/install';
  $source = new FileStorage($config_path);
  $config_storage = \Drupal::service('config.storage');

  foreach (['tpr_errand_service', 'tpr_service', 'tpr_service_channel'] as $type) {
    $config_name = sprintf('language.content_settings.%s.%s', $type, $type);
    $config_storage->write($config_name, $source->read($config_name));
  }
}
