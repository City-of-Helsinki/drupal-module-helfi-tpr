<?php

/**
 * @file
 * Contains helfi_tpr installation procedures.
 */

declare(strict_types=1);

use Drupal\content_translation\ContentTranslationHandler;
use Drupal\Core\Field\BaseFieldDefinition;
use Drupal\Core\Language\LanguageInterface;
use Drupal\Core\StringTranslation\TranslatableMarkup;
use Drupal\helfi_tpr\Entity\ChannelTypeCollection;
use Drupal\migrate\Plugin\MigrateIdMapInterface;

/**
 * Helper function to get the content translation field definitions.
 *
 * @return array
 *   The translation fields.
 */
function _helfi_tpr_get_content_translation_fields(): array {
  $definitions['content_translation_source'] = BaseFieldDefinition::create('language')
    ->setLabel(t('Translation source'))
    ->setDescription(t('The source language from which this translation was created.'))
    ->setDefaultValue(LanguageInterface::LANGCODE_NOT_SPECIFIED)
    ->setInitialValue(LanguageInterface::LANGCODE_NOT_SPECIFIED)
    ->setRevisionable(TRUE)
    ->setTranslatable(TRUE);

  $definitions['content_translation_outdated'] = BaseFieldDefinition::create('boolean')
    ->setLabel(t('Translation outdated'))
    ->setDescription(t('A boolean indicating whether this translation needs to be updated.'))
    ->setDefaultValue(FALSE)
    ->setInitialValue(FALSE)
    ->setRevisionable(TRUE)
    ->setTranslatable(TRUE);

  $definitions['content_translation_uid'] = BaseFieldDefinition::create('entity_reference')
    ->setLabel(t('Translation author'))
    ->setDescription(t('The author of this translation.'))
    ->setSetting('target_type', 'user')
    ->setSetting('handler', 'default')
    ->setRevisionable(TRUE)
    ->setDefaultValueCallback(ContentTranslationHandler::class . '::getDefaultOwnerId')
    ->setTranslatable(TRUE);

  $definitions['content_translation_status'] = BaseFieldDefinition::create('boolean')
    ->setLabel(t('Translation status'))
    ->setDescription(t('A boolean indicating whether the translation is visible to non-translators.'))
    ->setDefaultValue(TRUE)
    ->setInitialValue(TRUE)
    ->setRevisionable(TRUE)
    ->setTranslatable(TRUE);

  $definitions['content_translation_created'] = BaseFieldDefinition::create('created')
    ->setLabel(t('Translation created time'))
    ->setDescription(t('The Unix timestamp when the translation was created.'))
    ->setRevisionable(TRUE)
    ->setTranslatable(TRUE);

  $definitions['content_translation_changed'] = BaseFieldDefinition::create('changed')
    ->setLabel(t('Translation changed time'))
    ->setDescription(t('The Unix timestamp when the translation was most recently saved.'))
    ->setRevisionable(TRUE)
    ->setTranslatable(TRUE);

  return $definitions;
}

/**
 * Changes the default service channel display formatter for Errand service.
 */
function helfi_tpr_update_8036() : void {
  $expectedOrder = [];
  foreach (ChannelTypeCollection::all() as $item) {
    $expectedOrder[$item->id] = ['weight' => $item->weight];
  }
  /** @var \Drupal\Core\Entity\EntityDisplayRepositoryInterface $display_repository */
  $display_repository = \Drupal::service('entity_display.repository');
  $display_repository->getViewDisplay('tpr_errand_service', 'tpr_errand_service')
    ->setComponent('channels', [
      'type' => 'tpr_service_channel_formatter',
      'settings' => [
        'sort_order' => $expectedOrder,
      ],
      'label' => 'hidden',
    ])
    ->save();
}

/**
 * Hide service channel label.
 */
function helfi_tpr_update_8037() : void {
  // Re-run previous update with label = 'hidden' added.
  helfi_tpr_update_8036();
}

/**
 * Rename the school_details field to detail_items.
 */
function helfi_tpr_update_8038() : void {
  $manager = \Drupal::entityDefinitionUpdateManager();

  if ($oldDefinition = $manager->getFieldStorageDefinition('school_details', 'tpr_ontology_word_details')) {
    drupal_flush_all_caches();

    // Remove the current field with all field data. However, the data is
    // fetched using the tpr_ontology_word_details migration, so it's easy to
    // re-import.
    $manager->uninstallFieldStorageDefinition($oldDefinition);

    // Install the renamed field.
    $fields['detail_items'] = BaseFieldDefinition::create('tpr_ontology_word_detail_item')
      ->setLabel(new TranslatableMarkup('Details'))
      ->setRevisionable(FALSE)
      ->setTranslatable(TRUE)
      ->setCardinality(BaseFieldDefinition::CARDINALITY_UNLIMITED)
      ->setDisplayConfigurable('view', TRUE)
      ->setDisplayOptions('form', [
        'type' => 'readonly_field_widget',
      ]);

    foreach ($fields as $name => $field) {
      \Drupal::entityDefinitionUpdateManager()
        ->installFieldStorageDefinition($name, 'tpr_ontology_word_details', 'helfi_tpr', $field);
    }
  }
}

/**
 * Add 'highlights' field to the TPR Unit entity.
 */
function helfi_tpr_update_8039() : void {
  $fields['highlights'] = BaseFieldDefinition::create('tpr_connection')
    ->setLabel(new TranslatableMarkup('Highlights'))
    ->setTranslatable(TRUE)
    ->setCardinality(BaseFieldDefinition::CARDINALITY_UNLIMITED)
    ->setDisplayConfigurable('view', TRUE);

  foreach ($fields as $name => $field) {
    \Drupal::entityDefinitionUpdateManager()
      ->installFieldStorageDefinition($name, 'tpr_unit', 'helfi_tpr', $field);
  }
}

/**
 * Add 'ontologyword_ids' field to the TPR Unit entity.
 */
function helfi_tpr_update_8040() : void {
  $fields['ontologyword_ids'] = BaseFieldDefinition::create('integer')
    ->setLabel(new TranslatableMarkup('Ontologyword IDs'))
    ->setTranslatable(FALSE)
    ->setCardinality(BaseFieldDefinition::CARDINALITY_UNLIMITED);

  foreach ($fields as $name => $field) {
    \Drupal::entityDefinitionUpdateManager()
      ->installFieldStorageDefinition($name, 'tpr_unit', 'helfi_tpr', $field);
  }
}

/**
 * Add name_synonyms field and service_id field to Service entity.
 */
function helfi_tpr_update_8041() : void {

  $fields['service_id'] = BaseFieldDefinition::create('integer')
    ->setLabel(new TranslatableMarkup('Service grouping ID'))
    ->setDescription(new TranslatableMarkup('Value from service_id property'))
    ->setDisplayOptions('form', [
      'type' => 'readonly_field_widget',
    ])
    ->setDisplayConfigurable('form', TRUE)
    ->setDisplayConfigurable('view', TRUE)
    ->setSetting('unsigned', TRUE);

  $fields['name_synonyms'] = BaseFieldDefinition::create('string_long')
    ->setTranslatable(TRUE)
    ->setRevisionable(FALSE)
    ->setLabel(new TranslatableMarkup('Name synonyms'))
    ->setDescription(new TranslatableMarkup('Name synonyms for the service title.'))
    ->setDisplayOptions('form', [
      'type' => 'readonly_field_widget',
    ])
    ->setDisplayConfigurable('form', TRUE)
    ->setDisplayConfigurable('view', TRUE);

  foreach ($fields as $name => $field) {
    \Drupal::entityDefinitionUpdateManager()
      ->installFieldStorageDefinition($name, 'tpr_service', 'helfi_tpr', $field);
  }
}

/**
 * Map all services that needs update to import name_synonyms on next migration.
 */
function helfi_tpr_update_8042() : void {
  $database = \Drupal::database();

  if (!$database->schema()->tableExists('migrate_map_tpr_service')) {
    return;
  }
  $database->update('migrate_map_tpr_service')->fields([
    'source_row_status' => MigrateIdMapInterface::STATUS_NEEDS_UPDATE,
  ])->execute();
}

/**
 * Add has_unit field to Service entity.
 */
function helfi_tpr_update_8043() : void {
  $fields['has_unit'] = BaseFieldDefinition::create('boolean')
    ->setTranslatable(TRUE)
    ->setRevisionable(FALSE)
    ->setLabel(new TranslatableMarkup('Has Unit'))
    ->setDescription(new TranslatableMarkup('If service have unit its true else false.'))
    ->setDisplayOptions('form', [
      'type' => 'readonly_field_widget',
    ])
    ->setDisplayConfigurable('form', TRUE)
    ->setDisplayConfigurable('view', TRUE);

  foreach ($fields as $name => $field) {
    \Drupal::entityDefinitionUpdateManager()
      ->installFieldStorageDefinition($name, 'tpr_service', 'helfi_tpr', $field);
  }
}

/**
 * Add multiple missing fields to Unit entity.
 */
function helfi_tpr_update_8044() : void {
  $fields['other_info'] = BaseFieldDefinition::create('tpr_connection')
    ->setLabel(new TranslatableMarkup('Further information'))
    ->setDescription(new TranslatableMarkup('The "OTHER_INFO" connection type'))
    ->setTranslatable(TRUE)
    ->setCardinality(BaseFieldDefinition::CARDINALITY_UNLIMITED)
    ->setDisplayOptions('form', [
      'type' => 'readonly_field_widget',
    ])
    ->setDisplayConfigurable('form', TRUE)
    ->setDisplayConfigurable('view', TRUE);

  $fields['price_info'] = BaseFieldDefinition::create('tpr_connection')
    ->setLabel(new TranslatableMarkup('Charges'))
    ->setDescription(new TranslatableMarkup('The "PRICE" connection type'))
    ->setTranslatable(TRUE)
    ->setCardinality(BaseFieldDefinition::CARDINALITY_UNLIMITED)
    ->setDisplayOptions('form', [
      'type' => 'readonly_field_widget',
    ])
    ->setDisplayConfigurable('form', TRUE)
    ->setDisplayConfigurable('view', TRUE);

  $fields['links'] = BaseFieldDefinition::create('tpr_connection')
    ->setLabel(new TranslatableMarkup('Web sites'))
    ->setDescription(new TranslatableMarkup('The "LINK" connection type'))
    ->setTranslatable(TRUE)
    ->setCardinality(BaseFieldDefinition::CARDINALITY_UNLIMITED)
    ->setDisplayOptions('form', [
      'type' => 'readonly_field_widget',
    ])
    ->setDisplayConfigurable('form', TRUE)
    ->setDisplayConfigurable('view', TRUE);

  $fields['contacts'] = BaseFieldDefinition::create('tpr_connection')
    ->setLabel(new TranslatableMarkup('Other contact information'))
    ->setDescription(new TranslatableMarkup('The "PHONE_OR_EMAIL" connection type'))
    ->setTranslatable(TRUE)
    ->setCardinality(BaseFieldDefinition::CARDINALITY_UNLIMITED)
    ->setDisplayOptions('form', [
      'type' => 'readonly_field_widget',
    ])
    ->setDisplayConfigurable('form', TRUE)
    ->setDisplayConfigurable('view', TRUE);

  foreach ($fields as $name => $field) {
    \Drupal::entityDefinitionUpdateManager()
      ->installFieldStorageDefinition($name, 'tpr_unit', 'helfi_tpr', $field);
  }
}

/**
 * UHF-8939 Add TOPICAL field to Unit entity.
 */
function helfi_tpr_update_8045() : void {
  $topical_field = BaseFieldDefinition::create('tpr_connection')
    ->setLabel(new TranslatableMarkup('Topical', [], ['context' => 'TPR Unit field label']))
    ->setDescription(new TranslatableMarkup('The "TOPICAL" connection type'))
    ->setTranslatable(TRUE)
    ->setCardinality(BaseFieldDefinition::CARDINALITY_UNLIMITED)
    ->setDisplayOptions('form', [
      'type' => 'readonly_field_widget',
    ])
    ->setDisplayConfigurable('form', TRUE)
    ->setDisplayConfigurable('view', TRUE);

  \Drupal::entityDefinitionUpdateManager()
    ->installFieldStorageDefinition('topical', 'tpr_unit', 'helfi_tpr', $topical_field);
}

/**
 * UHF-9159 Add SUBGROUP field to Unit entity.
 */
function helfi_tpr_update_8046() : void {
  $subgroup_field = BaseFieldDefinition::create('tpr_connection')
    ->setLabel(new TranslatableMarkup('Contact details of daycare centre groups', [], ['context' => 'TPR Unit field label']))
    ->setDescription(new TranslatableMarkup('The "SUBGROUP" connection type'))
    ->setTranslatable(TRUE)
    ->setCardinality(BaseFieldDefinition::CARDINALITY_UNLIMITED)
    ->setDisplayOptions('form', [
      'type' => 'readonly_field_widget',
    ])
    ->setDisplayConfigurable('form', TRUE)
    ->setDisplayConfigurable('view', TRUE);

  \Drupal::entityDefinitionUpdateManager()
    ->installFieldStorageDefinition('subgroup', 'tpr_unit', 'helfi_tpr', $subgroup_field);
}

/**
 * UHF-9940 Add information text field to Channel entity.
 */
function helfi_tpr_update_8047() : void {
  $field = BaseFieldDefinition::create('text_long')
    ->setTranslatable(TRUE)
    ->setRevisionable(FALSE)
    ->setLabel(new TranslatableMarkup('Additional information'))
    ->setDisplayOptions('form', [
      'type' => 'readonly_field_widget',
    ])
    ->setDisplayConfigurable('form', TRUE)
    ->setDisplayConfigurable('view', TRUE);

  \Drupal::entityDefinitionUpdateManager()
    ->installFieldStorageDefinition('information', 'tpr_service_channel', 'helfi_tpr', $field);
}

/**
 * UHF-8908 Convert email field type to email.
 */
function helfi_tpr_update_8048() : void {
  $entityDefinitionManager = \Drupal::entityDefinitionUpdateManager();
  $database = \Drupal::database();

  foreach (['tpr_unit', 'tpr_service_channel'] as $entityType) {
    $fieldDefinition = $entityDefinitionManager->getFieldStorageDefinition('email', $entityType);

    // Uninstall old string email field.
    if ($fieldDefinition->getType() === 'string') {
      $entityDefinitionManager->uninstallFieldStorageDefinition($fieldDefinition);
    }

    $field = BaseFieldDefinition::create('email')
      ->setLabel(new TranslatableMarkup('Email'))
      ->setTranslatable(FALSE)
      ->setRevisionable(FALSE)
      ->setSettings([
        'max_length' => 255,
      ])
      ->setDisplayConfigurable('view', TRUE)
      ->setDisplayConfigurable('form', TRUE)
      ->setDisplayOptions('form', [
        'type' => 'readonly_field_widget',
      ]);

    \Drupal::entityDefinitionUpdateManager()
      ->installFieldStorageDefinition('email', $entityType, 'helfi_tpr', $field);

    // Mark migrate map as 'needs update'.
    if (!$database->schema()->tableExists('migrate_map_' . $entityType)) {
      return;
    }
    $database->update('migrate_map_' . $entityType)->fields([
      'source_row_status' => MigrateIdMapInterface::STATUS_NEEDS_UPDATE,
    ])->execute();
  }
}
