<?php

/**
 * @file
 * Contains helfi_tpr.
 */

declare(strict_types = 1);

use Drupal\Core\Access\AccessResult;
use Drupal\Core\Database\Query\AlterableInterface;
use Drupal\Core\Entity\EntityInterface;
use Drupal\Core\Render\Element;
use Drupal\Core\Session\AccountInterface;

/**
 * Implements hook_theme().
 */
function helfi_tpr_theme() : array {
  return [
    'tpr_accessibility_sentences' => [
      'variables' => ['name' => NULL, 'items' => []],
    ],
    'tpr_ontology_word_detail_item' => [
      'variables' => ['clarification' => NULL, 'schoolyear' => NULL],
      'template' => 'tpr-ontology-word-detail-item',
    ],
    'tpr_unit' => [
      'render element' => 'elements',
      'template' => 'tpr-unit',
    ],
    'tpr_service' => [
      'render element' => 'elements',
      'template' => 'tpr-service',
    ],
    'tpr_unit_form' => [
      'render element' => 'form',
    ],
    'tpr_service_form' => [
      'render element' => 'form',
    ],
    'tpr_service_channel' => [
      'render element' => 'elements',
      'template' => 'tpr-service-channel',
    ],
    'tpr_errand_service' => [
      'render element' => 'elements',
      'template' => 'tpr-errand-service',
    ],
    'tpr_ontology_word_details' => [
      'render element' => 'elements',
      'template' => 'tpr-ontology-word-details',
    ],
    'tpr_ontology_word_details_form' => [
      'render element' => 'form',
    ],
  ];
}

/**
 * Implements hook_theme_suggestions_HOOK().
 */
function helfi_tpr_theme_suggestions_tpr_unit(array $variables) : array {
  $suggestions = [];
  $sanitized_view_mode = strtr($variables['elements']['#view_mode'], '.', '_');

  $suggestions[] = 'tpr_unit__' . $sanitized_view_mode;

  return $suggestions;
}

/**
 * Implements hook_theme_suggestions_HOOK().
 */
function helfi_tpr_theme_suggestions_tpr_service(array $variables) : array {
  $suggestions = [];
  $sanitized_view_mode = strtr($variables['elements']['#view_mode'], '.', '_');

  $suggestions[] = 'tpr_service__' . $sanitized_view_mode;

  return $suggestions;
}

/**
 * Implements hook_theme_suggestions_HOOK().
 */
function helfi_tpr_theme_suggestions_tpr_service_channel(array $variables) : array {
  $suggestions = [];
  $sanitized_view_mode = strtr($variables['elements']['#view_mode'], '.', '_');

  $suggestions[] = 'tpr_service_channel__' . $sanitized_view_mode;

  return $suggestions;
}

/**
 * Implements hook_theme_suggestions_HOOK().
 */
function helfi_tpr_theme_suggestions_tpr_errand_service(array $variables) : array {
  $suggestions = [];
  $sanitized_view_mode = strtr($variables['elements']['#view_mode'], '.', '_');

  $suggestions[] = 'tpr_errand_service__' . $sanitized_view_mode;

  return $suggestions;
}

/**
 * Prepares variables for tpr_unit templates.
 *
 * Default template: tpr-unit.html.twig.
 *
 * @param array $variables
 *   An associative array containing:
 *   - elements: An array of elements to display in view mode.
 */
function template_preprocess_tpr_unit(array &$variables) : void {
  $variables['view_mode'] = $variables['elements']['#view_mode'];
  // Helpful $content variable for templates.
  foreach (Element::children($variables['elements']) as $key) {
    $variables['content'][$key] = $variables['elements'][$key];
  }
  if (isset($variables['elements']['#tpr_unit'])) {
    $variables['entity'] = $variables['elements']['#tpr_unit'];
    $variables['content']['description_summary'] = $variables['elements']['#tpr_unit']->get('description')->summary;

    // Get 'hide_description' field value and pass it to the template.
    $hide_description = $variables['entity']->get('hide_description')->value;
    $variables['hide_description'] = boolval($hide_description);

    // Get 'show_www' field value and pass it to the template.
    $show_www = $variables['entity']->get('show_www')->value;
    $variables['show_www'] = boolval($show_www);
  }
}

/**
 * Prepares variables for tpr_service templates.
 *
 * Default template: tpr-service.html.twig.
 *
 * @param array $variables
 *   An associative array containing:
 *   - elements: An array of elements to display in view mode.
 */
function template_preprocess_tpr_service(array &$variables) : void {
  $variables['view_mode'] = $variables['elements']['#view_mode'];
  // Helpful $content variable for templates.
  foreach (Element::children($variables['elements']) as $key) {
    $variables['content'][$key] = $variables['elements'][$key];
  }
  if (isset($variables['elements']['#tpr_service'])) {
    $variables['entity'] = $variables['elements']['#tpr_service'];
    $variables['content']['description_summary'] = $variables['elements']['#tpr_service']->get('description')->summary;
  }
}

/**
 * Prepares variables for tpr_service_channel templates.
 *
 * Default template: tpr-service-channel.html.twig.
 *
 * @param array $variables
 *   An associative array containing:
 *   - elements: An array of elements to display in view mode.
 */
function template_preprocess_tpr_service_channel(array &$variables) : void {
  $variables['view_mode'] = $variables['elements']['#view_mode'];
  // Helpful $content variable for templates.
  foreach (Element::children($variables['elements']) as $key) {
    $variables['content'][$key] = $variables['elements'][$key];
  }
  if (isset($variables['elements']['#tpr_service_channel'])) {
    $variables['entity'] = $variables['elements']['#tpr_service_channel'];
  }
}

/**
 * Prepares variables for tpr_errand_service templates.
 *
 * Default template: tpr-errand-service.html.twig.
 *
 * @param array $variables
 *   An associative array containing:
 *   - elements: An array of elements to display in view mode.
 */
function template_preprocess_tpr_errand_service(array &$variables) : void {
  $variables['view_mode'] = $variables['elements']['#view_mode'];
  // Helpful $content variable for templates.
  foreach (Element::children($variables['elements']) as $key) {
    $variables['content'][$key] = $variables['elements'][$key];
  }
  if (isset($variables['elements']['#tpr_errand_service'])) {
    $variables['entity'] = $variables['elements']['#tpr_errand_service'];
  }
}

/**
 * Prepares variables for tpr_ontology_word_details templates.
 *
 * Default template: tpr-ontology-word-details.html.twig.
 *
 * @param array $variables
 *   An associative array containing:
 *   - elements: An array of elements to display in view mode.
 */
function template_preprocess_tpr_ontology_word_details(array &$variables) : void {
  $variables['view_mode'] = $variables['elements']['#view_mode'];
  // Helpful $content variable for templates.
  foreach (Element::children($variables['elements']) as $key) {
    $variables['content'][$key] = $variables['elements'][$key];
  }
  if (isset($variables['elements']['#tpr_ontology_word_details'])) {
    $variables['entity'] = $variables['elements']['#tpr_ontology_word_details'];
  }
}

/**
 * Implements hook_ENTITY_TYPE_access().
 */
function helfi_tpr_tpr_unit_access(EntityInterface $entity, $operation, AccountInterface $account) : AccessResult {
  // Allow user to view unpublished Units based on permission.
  if ($operation === 'view' && !$entity->isPublished()) {
    return AccessResult::allowedIfHasPermission($account, 'view unpublished tpr_unit');
  }

  return AccessResult::neutral();
}

/**
 * Implements hook_ENTITY_TYPE_access().
 */
function helfi_tpr_tpr_service_access(EntityInterface $entity, $operation, AccountInterface $account) : AccessResult {
  // Allow user to view unpublished Services based on permission.
  if ($operation === 'view' && !$entity->isPublished()) {
    return AccessResult::allowedIfHasPermission($account, 'view unpublished tpr_service');
  }

  return AccessResult::neutral();
}

/**
 * Implements hook_ENTITY_TYPE_access().
 */
function helfi_tpr_tpr_service_channel_access(EntityInterface $entity, $operation, AccountInterface $account) : AccessResult {
  // Allow user to view unpublished Service channels based on permission.
  if ($operation === 'view' && !$entity->isPublished()) {
    return AccessResult::allowedIfHasPermission($account, 'view unpublished tpr_service_channel');
  }

  return AccessResult::neutral();
}

/**
 * Implements hook_ENTITY_TYPE_access().
 */
function helfi_tpr_tpr_errand_service_access(EntityInterface $entity, $operation, AccountInterface $account) : AccessResult {
  // Allow user to view unpublished Errand services based on permission.
  if ($operation === 'view' && !$entity->isPublished()) {
    return AccessResult::allowedIfHasPermission($account, 'view unpublished tpr_errand_service');
  }

  return AccessResult::neutral();
}

/**
 * Implements hook_query_TAG_alter().
 */
function helfi_tpr_query_owd_relationship_alter(AlterableInterface $query) : void {
  $query->groupBy('id');
}

/**
 * Implements hook_views_data_alter().
 */
function helfi_tpr_views_data_alter(&$data) {
  $data['tpr_service_field_data']['id_or_service_id'] = [
    'title' => t('ID or Service ID'),
    'help' => t('Displays entities that have either id or service IDs'),
    'argument' => [
      'field' => 'id',
      'name table' => 'tpr_service_field_data',
      'name field' => 'id',
      'id' => 'id_or_service_id_handler',
    ],
  ];

}
