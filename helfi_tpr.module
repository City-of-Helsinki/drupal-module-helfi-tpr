<?php

/**
 * @file
 * Contains helfi_tpr.
 */

use Drupal\Core\Render\Element;

/**
 * Implements hook_theme().
 */
function helfi_tpr_theme() {
  return [
    'tpr_accessibility_sentences' => [
      'variables' => ['name' => NULL, 'items' => []],
    ],
    'tpr-school-details' => [
      'variables' => ['clarification' => NULL, 'schoolyear' => NULL],
      'template' => 'tpr-school-details',
    ],
    'tpr_unit' => [
      'render element' => 'elements',
      'template' => 'tpr-unit',
    ],
    'tpr_service' => [
      'render element' => 'elements',
      'template' => 'tpr-service',
    ],
    'tpr_unit_form' => [
      'render element' => 'form',
    ],
    'tpr_service_form' => [
      'render element' => 'form',
    ],
    'tpr_service_channel' => [
      'render element' => 'elements',
      'template' => 'tpr-service-channel'
    ],
    'tpr_errand_service' => [
      'render element' => 'elements',
      'template' => 'tpr-errand-service'
    ],
    'tpr_ontology_word_details' => [
      'render element' => 'elements',
      'template' => 'tpr-ontology-word-details',
    ],
    'tpr_ontology_word_details_form' => [
      'render element' => 'form',
    ],
  ];
}

/**
 * Implements hook_theme_suggestions_HOOK().
 */
function helfi_tpr_theme_suggestions_tpr_unit(array $variables) {
  $suggestions = [];
  $sanitized_view_mode = strtr($variables['elements']['#view_mode'], '.', '_');

  $suggestions[] = 'tpr_unit__' . $sanitized_view_mode;

  return $suggestions;
}

/**
 * Implements hook_theme_suggestions_HOOK().
 */
function helfi_tpr_theme_suggestions_tpr_service(array $variables) {
  $suggestions = [];
  $sanitized_view_mode = strtr($variables['elements']['#view_mode'], '.', '_');

  $suggestions[] = 'tpr_service__' . $sanitized_view_mode;

  return $suggestions;
}

/**
 * Implements hook_theme_suggestions_HOOK().
 */
function helfi_tpr_theme_suggestions_tpr_service_channel(array $variables) {
  $suggestions = [];
  $sanitized_view_mode = strtr($variables['elements']['#view_mode'], '.', '_');

  $suggestions[] = 'tpr_service_channel__' . $sanitized_view_mode;

  return $suggestions;
}

/**
 * Implements hook_theme_suggestions_HOOK().
 */
function helfi_tpr_theme_suggestions_tpr_errand_service(array $variables) {
  $suggestions = [];
  $sanitized_view_mode = strtr($variables['elements']['#view_mode'], '.', '_');

  $suggestions[] = 'tpr_errand_service__' . $sanitized_view_mode;

  return $suggestions;
}

/**
 * Prepares variables for tpr_unit templates.
 *
 * Default template: tpr-unit.html.twig.
 *
 * @param array $variables
 *   An associative array containing:
 *   - elements: An array of elements to display in view mode.
 */
function template_preprocess_tpr_unit(array &$variables) {
  $variables['view_mode'] = $variables['elements']['#view_mode'];
  // Helpful $content variable for templates.
  foreach (Element::children($variables['elements']) as $key) {
    $variables['content'][$key] = $variables['elements'][$key];
  }
  if (isset($variables['elements']['#tpr_unit'])) {
    $variables['entity'] = $variables['elements']['#tpr_unit'];
    $variables['content']['description_summary'] = $variables['elements']['#tpr_unit']->get('description')->summary;

    // Get provided languages for the template.
    $provided_languages = $variables['entity']->get('provided_languages')->getValue();

    foreach ($provided_languages as $provided_language) {
      $variables['provided_languages'][] = $provided_language['value'];
    }

    // Get 'hide_description' field value and pass it to the template.
    $hide_description = $variables['entity']->get('hide_description')->value;
    $variables['hide_description'] = boolval($hide_description);
  }
}

/**
 * Prepares variables for tpr_service templates.
 *
 * Default template: tpr-service.html.twig.
 *
 * @param array $variables
 *   An associative array containing:
 *   - elements: An array of elements to display in view mode.
 */
function template_preprocess_tpr_service(array &$variables) {
  $variables['view_mode'] = $variables['elements']['#view_mode'];
  // Helpful $content variable for templates.
  foreach (Element::children($variables['elements']) as $key) {
    $variables['content'][$key] = $variables['elements'][$key];
  }
  if (isset($variables['elements']['#tpr_service'])) {
    $variables['entity'] = $variables['elements']['#tpr_service'];
    $variables['content']['description_summary'] = $variables['elements']['#tpr_service']->get('description')->summary;
  }
}

/**
 * Prepares variables for tpr_service_channel templates.
 *
 * Default template: tpr-service-channel.html.twig.
 *
 * @param array $variables
 *   An associative array containing:
 *   - elements: An array of elements to display in view mode.
 */
function template_preprocess_tpr_service_channel(array &$variables) {
  $variables['view_mode'] = $variables['elements']['#view_mode'];
  // Helpful $content variable for templates.
  foreach (Element::children($variables['elements']) as $key) {
    $variables['content'][$key] = $variables['elements'][$key];
  }
  if (isset($variables['elements']['#tpr_service_channel'])) {
    $variables['entity'] = $variables['elements']['#tpr_service_channel'];
    //$variables['content']['description_summary'] = $variables['elements']['#tpr_service_channel']->get('description')->summary;
  }
}

/**
 * Prepares variables for tpr_errand_service templates.
 *
 * Default template: tpr-errand-service.html.twig.
 *
 * @param array $variables
 *   An associative array containing:
 *   - elements: An array of elements to display in view mode.
 */
function template_preprocess_tpr_errand_service(array &$variables) {
  $variables['view_mode'] = $variables['elements']['#view_mode'];
  // Helpful $content variable for templates.
  foreach (Element::children($variables['elements']) as $key) {
    $variables['content'][$key] = $variables['elements'][$key];
  }
  if (isset($variables['elements']['#tpr_errand_service'])) {
    $variables['entity'] = $variables['elements']['#tpr_errand_service'];
    //$variables['content']['description_summary'] = $variables['elements']['#tpr_service_channel']->get('description')->summary;
  }
}

/**
 * Prepares variables for tpr_ontology_word_details templates.
 *
 * Default template: tpr-ontology-word-details.html.twig.
 *
 * @param array $variables
 *   An associative array containing:
 *   - elements: An array of elements to display in view mode.
 */
function template_preprocess_tpr_ontology_word_details(array &$variables) {
  $variables['view_mode'] = $variables['elements']['#view_mode'];
  // Helpful $content variable for templates.
  foreach (Element::children($variables['elements']) as $key) {
    $variables['content'][$key] = $variables['elements'][$key];
  }
  if (isset($variables['elements']['#tpr_ontology_word_details'])) {
    $variables['entity'] = $variables['elements']['#tpr_ontology_word_details'];}
}

/**
 * Implements hook_views_data_alter().
 *
 * @param array $data
 *   An array of all information about Views tables and fields.
 */
function helfi_tpr_views_data_alter(array &$data) {
  $data['tpr_unit']['emphasis_filter'] = [
        'title' => t('Emphasis filter'),
        'filter' => [
            'title' => t('Emphasis filter'),
            'help' => 'Filters units by emphasis.',
            'field' => 'nid',
            'id' => 'emphasis_filter',
        ]
    ];

  $data['tpr_unit']['educational_mission_filter'] = [
    'title' => t('Educational mission'),
    'filter' => [
      'title' => t('Educational mission'),
      'help' => 'Filters units by educational mission.',
      'field' => 'nid',
      'id' => 'educational_mission_filter',
    ]
  ];
}
