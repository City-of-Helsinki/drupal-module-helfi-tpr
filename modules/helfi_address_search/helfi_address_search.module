<?php

/**
 * @file
 * Contains helfi_address_search.
 */

declare(strict_types = 1);

use Drupal\Core\Entity\EntityTypeInterface;
use Drupal\Core\Field\BaseFieldDefinition;
use Drupal\helfi_address_search\Plugin\views\filter\AddressSearch;
use Drupal\views\ViewExecutable;

/**
 * Implements hook_views_data_alter().
 */
function helfi_address_search_views_data_alter(array &$data): void {
  $data['tpr_unit']['address_search'] = [
    'title' => t('Address search'),
    'filter' => [
      'title' => t('Address search'),
      'help' => 'Filters units by address.',
      'id' => 'address_search',
    ],
  ];

  $data['tpr_unit']['distance'] = [
    'title' => t('Computed distance'),
    'group' => t('TPR - Unit'),
    'field' => [
      'title' => t('Computed distance'),
      'help' => t('Computes the distance to given location.'),
      'id' => 'distance',
    ],
  ];

  $data['views']['area_address_search_info'] = [
    'title' => t('Address search information'),
    'help' => t('Provide markup for successful and failed address search.'),
    'area' => [
      'id' => 'address_search_info',
    ],
  ];
}

/**
 * Implements hook_views_pre_execute().
 */
function helfi_address_search_views_pre_execute(ViewExecutable $view): void {
  if (!isset($view->filter['address_search'])) {
    return;
  }

  // Query all results as the sorting and paging is done with
  // AddressSearch::getSortedResultsByAddress().
  $view->query->setLimit(0);
  $view->query->setOffset(0);
}

/**
 * Implements hook_views_pre_render().
 */
function helfi_address_search_views_pre_render(ViewExecutable $view): void {
  if (isset($view->filter['address_search'])) {
    $view = AddressSearch::sortByAddress($view);
  }
}

/**
 * Implements hook_entity_bundle_field_info_alter().
 */
function helfi_address_search_entity_bundle_field_info_alter(&$fields, EntityTypeInterface $entity_type): void {
  if ($entity_type->id() !== 'tpr_unit') {
    return;
  }

  $fields['distance'] = BaseFieldDefinition::create('integer')
    ->setName('distance')
    ->setLabel(t('Computed distance'))
    ->setComputed(TRUE)
    ->setTargetEntityTypeId('tpr_unit')
    ->setCardinality(1)
    ->setTranslatable(FALSE)
    ->setRequired(FALSE)
    ->setDisplayOptions('view', [
      'type' => 'number_decimal_kilo',
      'label' => 'hidden',
      'weight' => 0,
    ])
    ->setSettings([
      'suffix' => ' km',
      'placeholder' => '',
      'minimum_value' => '0.1',
    ])
    ->setDisplayConfigurable('form', FALSE)
    ->setDisplayConfigurable('view', FALSE);
}
